{
  "hash": "b99fd1a5c7ca4a7b88cc2011a69a1d3d",
  "result": {
    "markdown": "---\ntitle: \"Marveling at map()\"\nsubtitle: \"Celebrating map\"\nauthor: \"RWW\"\ndate: '2022-11-04'\nslug: []\ncategories:\n  - R\ntags: []\n---\n\n\n**I want to learn about map and begin to replace my use of apply for everything.** \n\n\n\n\n\nGoal: import a directory full of csv files.\n\nMethod.  First, load `purrr` and the `tidyverse` and then create a tibble for the *filenames* because we are creating the example.  `map` wants to output a list so I have to unlist it into the tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\n# Create a set of filenames\nfnames <- tibble(\n  filenames=unlist(\n  map(c(1:5), \n      ~paste0(\"file\",.x,\".csv\", sep=\"\")\n      )))\nfnames\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 Ã— 1\n  filenames\n  <chr>    \n1 file1.csv\n2 file2.csv\n3 file3.csv\n4 file4.csv\n5 file5.csv\n```\n:::\n:::\n\n\n## Create the files\n\nNow I need to create some files in a given directory.  I have created a directory called *fakedata*.\n\n```\ndir.create(\"fakedata\")\n```\n\nNow I want to write the data to the directory to conclude the reproducible example.  In this case, there are five csv files.\n\n```\nwalk(fnames$filenames, \n     ~ write.csv(data.frame(x1=rnorm(10),x2=rnorm(10)),       file = paste0(\"./fakedata/\",.x, sep=\"\")))\n```\n\nThat seems to work.\n\n![Photo of success](img/Screen Shot 2022-11-04 at 12.58.16 PM.png)\n\n\n## Loading the files\n\nThough I already know the names of the files, in most cases, I would need to collect them.  In this particular case, `dir()` will come in very handy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir(\"fakedata\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"file1.csv\" \"file2.csv\" \"file3.csv\" \"file4.csv\" \"file5.csv\"\n```\n:::\n\n```{.r .cell-code}\nfile.names <- dir(\"fakedata\")\n```\n:::\n\n\nNow let's take those and load the files.  We will combine `read.csv` with `map` to get a list containing all of the files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.files <- file.names %>% map(., ~ read.csv(paste0(\"fakedata/\",.x, sep=\"\")))\nread.files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n    X          x1          x2\n1   1 -1.38001285 -1.22636540\n2   2  0.18200309 -0.47330201\n3   3  0.38672920  0.32228012\n4   4  1.59951536  0.17438280\n5   5  0.04066402 -2.17050573\n6   6 -0.25814383  0.35882778\n7   7 -1.09942888  0.05209077\n8   8 -0.96198031 -0.31535964\n9   9 -0.71146188 -0.88743843\n10 10 -0.90768963 -1.64463965\n\n[[2]]\n    X          x1          x2\n1   1 -0.93160098  0.38577793\n2   2 -1.11500843 -2.28599247\n3   3  0.48695836 -0.38091065\n4   4  0.43833164  1.94491090\n5   5  1.38558361  0.29454227\n6   6 -0.08697636  0.14269709\n7   7  1.32351741  0.29570675\n8   8 -0.51831633 -1.07216871\n9   9 -0.51175809  0.01959317\n10 10  0.89500573 -1.03716777\n\n[[3]]\n    X         x1          x2\n1   1 -0.8834481 -0.25006254\n2   2  1.0708784 -1.36573365\n3   3  0.3286340 -0.10929292\n4   4  1.2088226 -0.04355173\n5   5 -0.5257318 -0.47974675\n6   6  3.0484664 -0.32511134\n7   7 -0.2252273  1.23925377\n8   8  1.0458161 -1.18513179\n9   9  0.3243315  1.44062060\n10 10  0.8238747 -1.53231879\n\n[[4]]\n    X         x1          x2\n1   1  0.8460534  0.08150364\n2   2 -0.3220720  1.07239215\n3   3  1.3478005  1.18462705\n4   4  0.9222565  1.16223158\n5   5  1.1380822  1.05890088\n6   6  0.6123547 -1.46789361\n7   7 -0.2974722 -0.37149873\n8   8  1.0321546  0.15357759\n9   9 -0.3445316 -0.95253704\n10 10 -0.1112015 -0.64225964\n\n[[5]]\n    X          x1          x2\n1   1 -1.15093999  0.54168693\n2   2  0.35413293 -0.09396014\n3   3 -1.26696402  0.25582265\n4   4  0.06712394  1.23749986\n5   5  0.53648590  0.37711498\n6   6 -1.29457309  0.23440024\n7   7  0.44966760  0.45751493\n8   8 -0.42755728  0.89952539\n9   9 -0.06584558  0.09520603\n10 10 -0.50046918 -0.16258746\n```\n:::\n:::\n\n\nLet me stick the filenames on the list elements.  This allows any individual one to be addressed in a relatively intuitive way.  I show an example by calculating the mean of x1 in the third dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean.files <- read.files\nnames(clean.files) <- file.names\nclean.files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$file1.csv\n    X          x1          x2\n1   1 -1.38001285 -1.22636540\n2   2  0.18200309 -0.47330201\n3   3  0.38672920  0.32228012\n4   4  1.59951536  0.17438280\n5   5  0.04066402 -2.17050573\n6   6 -0.25814383  0.35882778\n7   7 -1.09942888  0.05209077\n8   8 -0.96198031 -0.31535964\n9   9 -0.71146188 -0.88743843\n10 10 -0.90768963 -1.64463965\n\n$file2.csv\n    X          x1          x2\n1   1 -0.93160098  0.38577793\n2   2 -1.11500843 -2.28599247\n3   3  0.48695836 -0.38091065\n4   4  0.43833164  1.94491090\n5   5  1.38558361  0.29454227\n6   6 -0.08697636  0.14269709\n7   7  1.32351741  0.29570675\n8   8 -0.51831633 -1.07216871\n9   9 -0.51175809  0.01959317\n10 10  0.89500573 -1.03716777\n\n$file3.csv\n    X         x1          x2\n1   1 -0.8834481 -0.25006254\n2   2  1.0708784 -1.36573365\n3   3  0.3286340 -0.10929292\n4   4  1.2088226 -0.04355173\n5   5 -0.5257318 -0.47974675\n6   6  3.0484664 -0.32511134\n7   7 -0.2252273  1.23925377\n8   8  1.0458161 -1.18513179\n9   9  0.3243315  1.44062060\n10 10  0.8238747 -1.53231879\n\n$file4.csv\n    X         x1          x2\n1   1  0.8460534  0.08150364\n2   2 -0.3220720  1.07239215\n3   3  1.3478005  1.18462705\n4   4  0.9222565  1.16223158\n5   5  1.1380822  1.05890088\n6   6  0.6123547 -1.46789361\n7   7 -0.2974722 -0.37149873\n8   8  1.0321546  0.15357759\n9   9 -0.3445316 -0.95253704\n10 10 -0.1112015 -0.64225964\n\n$file5.csv\n    X          x1          x2\n1   1 -1.15093999  0.54168693\n2   2  0.35413293 -0.09396014\n3   3 -1.26696402  0.25582265\n4   4  0.06712394  1.23749986\n5   5  0.53648590  0.37711498\n6   6 -1.29457309  0.23440024\n7   7  0.44966760  0.45751493\n8   8 -0.42755728  0.89952539\n9   9 -0.06584558  0.09520603\n10 10 -0.50046918 -0.16258746\n```\n:::\n\n```{.r .cell-code}\nclean.files$file3.csv %>% summarise(mean(x1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   mean(x1)\n1 0.6216417\n```\n:::\n\n```{.r .cell-code}\nmean(read.files[[3]]$x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6216417\n```\n:::\n:::\n\n\nIf every spreadsheet happened to be the same, as these are, then we could also stack them.  There is a danger to the renaming because of the way it works with unlist.  Sticking with the original file, they are straightforward to stack using `map_dfr()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstacked.files <- file.names %>% map_dfr(., ~ read.csv(paste0(\"fakedata/\",.x, sep=\"\")))\nstacked.files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X          x1          x2\n1   1 -1.38001285 -1.22636540\n2   2  0.18200309 -0.47330201\n3   3  0.38672920  0.32228012\n4   4  1.59951536  0.17438280\n5   5  0.04066402 -2.17050573\n6   6 -0.25814383  0.35882778\n7   7 -1.09942888  0.05209077\n8   8 -0.96198031 -0.31535964\n9   9 -0.71146188 -0.88743843\n10 10 -0.90768963 -1.64463965\n11  1 -0.93160098  0.38577793\n12  2 -1.11500843 -2.28599247\n13  3  0.48695836 -0.38091065\n14  4  0.43833164  1.94491090\n15  5  1.38558361  0.29454227\n16  6 -0.08697636  0.14269709\n17  7  1.32351741  0.29570675\n18  8 -0.51831633 -1.07216871\n19  9 -0.51175809  0.01959317\n20 10  0.89500573 -1.03716777\n21  1 -0.88344806 -0.25006254\n22  2  1.07087838 -1.36573365\n23  3  0.32863403 -0.10929292\n24  4  1.20882258 -0.04355173\n25  5 -0.52573184 -0.47974675\n26  6  3.04846641 -0.32511134\n27  7 -0.22522727  1.23925377\n28  8  1.04581612 -1.18513179\n29  9  0.32433151  1.44062060\n30 10  0.82387468 -1.53231879\n31  1  0.84605339  0.08150364\n32  2 -0.32207204  1.07239215\n33  3  1.34780048  1.18462705\n34  4  0.92225652  1.16223158\n35  5  1.13808219  1.05890088\n36  6  0.61235469 -1.46789361\n37  7 -0.29747222 -0.37149873\n38  8  1.03215455  0.15357759\n39  9 -0.34453156 -0.95253704\n40 10 -0.11120152 -0.64225964\n41  1 -1.15093999  0.54168693\n42  2  0.35413293 -0.09396014\n43  3 -1.26696402  0.25582265\n44  4  0.06712394  1.23749986\n45  5  0.53648590  0.37711498\n46  6 -1.29457309  0.23440024\n47  7  0.44966760  0.45751493\n48  8 -0.42755728  0.89952539\n49  9 -0.06584558  0.09520603\n50 10 -0.50046918 -0.16258746\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}